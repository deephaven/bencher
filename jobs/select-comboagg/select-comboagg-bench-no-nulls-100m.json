{
  "benchmarks": [
    {
      "title": "Do a complex ComboAgg on 100m rows previously in memory via select",
      "generator_files": [ "relation-no-nulls-100m.json" ],
      "benchmark": {
          "statements" : [
              {
                  "title" : "preamble",
                  "text" : [
                      "import time",
                      "import deephaven.parquet as pt",
                      "from deephaven import Aggregation as agg, as_list",
                      "tag = 'no-nulls-100m'",
                      "bench_name = 'select-comboagg-bench-' + tag",
                  ],
                  "timed" : 0
              },

              {
                  "title" : "load tables",
                  "text" : "relation = pt.read('/data/relation-' + tag + '.parquet').select('animal_id', 'adjective_id')",
                  "timed" : 1
              },

              {
                  "title" : "setup metrics",
                  "file" : "before.py",
                  "timed" : 0
              },

              {
                  "title" : "perform ComboAgg",
                  "text" : [
                      "time_start_ns = time.perf_counter_ns()",
                      "result = relation.aggBy(as_list([agg.AggSum('SumAdj=adjective_id'),agg.AggMin('MinAdj=adjective_id'), agg.AggMax('MaxAdj=adjective_id'), agg.AggAvg('AvgAdj=adjective_id'), agg.AggStd('StdAdj=adjective_id'), agg.AggFirst('FirstAdj=adjective_id'), agg.AggLast('LastAdj=adjective_id'), agg.AggCount('CountAdj')]), 'animal_id')",
                      "time_end_ns = time.perf_counter_ns()",
                  ],
                  "timed" : 1
              },

              {
                  "title" : "post processing",
                  "file" : "after.py",
                  "timed" : 0
              }
          ]
      }
    }
  ]
}
